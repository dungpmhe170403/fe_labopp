/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublicHomeIndexRouteImport } from './routes/_public/home/index'
import { Route as AuthTestIndexRouteImport } from './routes/_auth/test/index'
import { Route as AuthSubmit_labIndexRouteImport } from './routes/_auth/submit_lab/index'
import { Route as AuthResultIndexRouteImport } from './routes/_auth/result/index'
import { Route as AuthLocPersonIndexRouteImport } from './routes/_auth/loc-person/index'
import { Route as AuthAboutIndexRouteImport } from './routes/_auth/about/index'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicHomeIndexRoute = PublicHomeIndexRouteImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => PublicRoute,
} as any)
const AuthTestIndexRoute = AuthTestIndexRouteImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSubmit_labIndexRoute = AuthSubmit_labIndexRouteImport.update({
  id: '/submit_lab/',
  path: '/submit_lab/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthResultIndexRoute = AuthResultIndexRouteImport.update({
  id: '/result/',
  path: '/result/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLocPersonIndexRoute = AuthLocPersonIndexRouteImport.update({
  id: '/loc-person/',
  path: '/loc-person/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAboutIndexRoute = AuthAboutIndexRouteImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PublicRouteWithChildren
  '/about': typeof AuthAboutIndexRoute
  '/loc-person': typeof AuthLocPersonIndexRoute
  '/result': typeof AuthResultIndexRoute
  '/submit_lab': typeof AuthSubmit_labIndexRoute
  '/test': typeof AuthTestIndexRoute
  '/home': typeof PublicHomeIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PublicRouteWithChildren
  '/about': typeof AuthAboutIndexRoute
  '/loc-person': typeof AuthLocPersonIndexRoute
  '/result': typeof AuthResultIndexRoute
  '/submit_lab': typeof AuthSubmit_labIndexRoute
  '/test': typeof AuthTestIndexRoute
  '/home': typeof PublicHomeIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_auth/about/': typeof AuthAboutIndexRoute
  '/_auth/loc-person/': typeof AuthLocPersonIndexRoute
  '/_auth/result/': typeof AuthResultIndexRoute
  '/_auth/submit_lab/': typeof AuthSubmit_labIndexRoute
  '/_auth/test/': typeof AuthTestIndexRoute
  '/_public/home/': typeof PublicHomeIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/loc-person'
    | '/result'
    | '/submit_lab'
    | '/test'
    | '/home'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/loc-person'
    | '/result'
    | '/submit_lab'
    | '/test'
    | '/home'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_public'
    | '/_auth/about/'
    | '/_auth/loc-person/'
    | '/_auth/result/'
    | '/_auth/submit_lab/'
    | '/_auth/test/'
    | '/_public/home/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/home/': {
      id: '/_public/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof PublicHomeIndexRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_auth/test/': {
      id: '/_auth/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof AuthTestIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/submit_lab/': {
      id: '/_auth/submit_lab/'
      path: '/submit_lab'
      fullPath: '/submit_lab'
      preLoaderRoute: typeof AuthSubmit_labIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/result/': {
      id: '/_auth/result/'
      path: '/result'
      fullPath: '/result'
      preLoaderRoute: typeof AuthResultIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/loc-person/': {
      id: '/_auth/loc-person/'
      path: '/loc-person'
      fullPath: '/loc-person'
      preLoaderRoute: typeof AuthLocPersonIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/about/': {
      id: '/_auth/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AuthAboutIndexRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthAboutIndexRoute: typeof AuthAboutIndexRoute
  AuthLocPersonIndexRoute: typeof AuthLocPersonIndexRoute
  AuthResultIndexRoute: typeof AuthResultIndexRoute
  AuthSubmit_labIndexRoute: typeof AuthSubmit_labIndexRoute
  AuthTestIndexRoute: typeof AuthTestIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAboutIndexRoute: AuthAboutIndexRoute,
  AuthLocPersonIndexRoute: AuthLocPersonIndexRoute,
  AuthResultIndexRoute: AuthResultIndexRoute,
  AuthSubmit_labIndexRoute: AuthSubmit_labIndexRoute,
  AuthTestIndexRoute: AuthTestIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface PublicRouteChildren {
  PublicHomeIndexRoute: typeof PublicHomeIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicHomeIndexRoute: PublicHomeIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
